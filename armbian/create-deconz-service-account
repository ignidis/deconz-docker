#!/bin/bash
#
# We will use the docker user namespace remapping functionality to isolate our containers
#
# This is the service account we will use to start the docker containers
# The service account owns the host volumes to store the persistent configuration and avoids starting containers as host root users
# In the container we should also define application users and avoid running these as root
#

SERVICE_USER="service";
SERVICE_USER_UID="9001";
SERVICE_GROUP="services";
SERVICE_GROUP_UID="9001";
ADD_GROUPS="services"

#
# Create service group and service account
#
userdel $SERVICE_USER >/dev/null 2>&1;
groupdel $SERVICE_GROUP >/dev/null 2>&1;

groupadd -g $SERVICE_GROUP_UID $SERVICE_GROUP;
useradd -u $SERVICE_USER_UID -g $SERVICE_GROUP --groups $ADD_GROUPS --shell /bin/bash --create-home $SERVICE_USER;
chown -R $SERVICE_USER:$SERVICE_GROUP /home/$SERVICE_USER/;

#
# Create the docker subuid and subgui files to allow for namespace remaping of the container.
# Namespace remaping -once configured in the docker daemon- starts the container as a host-unprivileged user, thus adding another
# security layer to the container already running internally as non-root
# In case of a privilege elevation exploit in the container, the host docker process must also be defeated and elevated to a host root
# The user mapping starts by assigning container uid/gid 0 to the UID/GID assigned and counting up.
# We allocate 65532 UIDs (GUIs) for the mapping, we must make sure ALL standard Linux UIDs/GIDs are contained in the range or setuid will fail for IDs 
# not remapped (e.g. apt-get update uses GID 65534 for nobody)
# We can select the internal container user by adding the initial UID of the range to the internal UID
# (container user 9001 would then be host user SERVICE_USER_UID + 9001 that becomes handy when we assign the ACL or ownership for the permanent storage
# KEEP IN MIND the INTERNAL CONTAINER USERS are remapped when we look from the host side (e.g. container root is SERVICE_USER_ID + 0 in the host)
#
echo "${SERVICE_USER}:${SERVICE_USER_UID}0000:65536" > /etc/subuid
echo "${SERVICE_GROUP}:${SERVICE_GROUP_UID}0000:65536" > /etc/subgid

#
# Copy the docker daemon configuration file to enable namespace remaping
#
if [ ! -f "/etc/docker/daemon.json" ]; then
	cp /home/sysadmin/setup-application-server/docker/deconz/armbian/@etc/docker/daemon.json /etc/docker/daemon.json
fi

#
# If using user namespace mapping we must grant explicit access for the container user to the raspbee device
# On first sight this is a limitation, but as we must guarantee the raspbee is only accesed by the deconz container it becomes a plus on security
# We must also grant access to the gpiomem device in order to be able to flash new firmware
#
if [ ! -f "/etc/udev/rules.d/99-deconz-docker.rule" ]; then
	cp /home/sysadmin/setup-application-server/docker/deconz/armbian/@etc/udev/rules.d/99-deconz-docker.rules /etc/udev/rules.d/99-deconz-docker.rules
fi

#
# Create persistent config directory, will be exposed as volume to the docker container
#
if [ ! -d "/var/lib/services/deconz" ]; then
    mkdir -p /var/lib/services/deconz/;
fi
if [ ! -d "/var/lib/services/node-red" ]; then
    mkdir -p /var/lib/services/node-red/;
fi
if [ ! -d "/var/lib/services/openhab" ]; then
    mkdir -p /var/lib/services/openhab/;
fi

#
#
# Ensure that the container root user has access to the mounted container directories
#
#chown -R "${SERVICE_USER_UID}0000":"${SERVICE_GROUP_UID}0000" /var/lib/services/deconz/;
#chown -R "${SERVICE_USER_UID}0000":"${SERVICE_GROUP_UID}0000" /var/lib/services/node-red/;
#chown -R "${SERVICE_USER_UID}0000":"${SERVICE_GROUP_UID}0000" /var/lib/services/openhab/;
#
# Where we know that the container service user is the one that will need access -and we know it's container id- we just change the ownership
# That will remove the need to grant the container user sudo rights, even for the first start of the container
#
chown -R "${SERVICE_USER_UID}9001":"${SERVICE_GROUP_UID}9001" /var/lib/services/deconz/;
chown -R "${SERVICE_USER_UID}9001":"${SERVICE_GROUP_UID}9001" /var/lib/services/node-red/;
chown -R "${SERVICE_USER_UID}9001":"${SERVICE_GROUP_UID}9001" /var/lib/services/openhab/;

#
# Ensure we can resolve the id of the internal container user to a common name
#
if ! id -u "${SERVICE_USER_UID}9001" &> /dev/null; then
    if [ -w /etc/passwd ]; then
        echo "docker-container:x:${SERVICE_USER_UID}9001:9001::/home/docker-container:/bin/false" >> /etc/passwd
    fi
fi

#
# Create and fill service configuration directories
#
if [ ! -d "/home/${SERVICE_USER}/deconz" ]; then
	cp -r /home/sysadmin/setup-application-server/docker/deconz/armbian/@home/. /home/${SERVICE_USER}
fi
if [ ! -d "/home/${SERVICE_USER}/nodered" ]; then
	cp -r /home/sysadmin/setup-application-server/docker/nodered/armbian/@home/. /home/${SERVICE_USER}
fi
if [ ! -d "/home/${SERVICE_USER}/openhab" ]; then
	cp -r /home/sysadmin/setup-application-server/docker/openhab/armbian/@home/. /home/${SERVICE_USER}
fi

#
# Make sure the service account has access to all files in the service's home directory
#
chown -R "${SERVICE_USER_UID}":"${SERVICE_GROUP_UID}" /home/${SERVICE_USER};

#
#
# Create the dockerfiles
#
#
# deconz Dockerfile
#
#pushd /home/sysadmin/setup-application-server/docker/deconz/tinkerboard/arm32v7/debian
#./build.sh 2.05.46

#
#
# nodered Dockerfile
#
#pushd /home/sysadmin/setup-application-server/docker/nodered/tinkerboard/arm32v7/debian
#./build.sh 0.19.5 10.14.2

#
#
# openhab Dockerfile
#
#pushd /home/sysadmin/setup-application-server/docker/openhab/tinkerboard/arm32v7/debian
#./build.sh 2.3.0 https://cdn.azul.com/zulu-embedded/bin/zulu8.33.0.134-jdk1.8.0_192-linux_aarch32hf.tar.gz 10.14.2

#
#
# Create the systemd service scripts in order to start the containers composing the system
#
#ln /home/"${SERVICE_USER}"/deconz/systemd/deconz-docker@.service /etc/systemd/system/deconz-docker@.service
#systemctl enable deconz-docker@"${SERVICE_USER}"
#systemctl start deconz-docker@"${SERVICE_USER}"

#ln /home/"${SERVICE_USER}"/node-red/systemd/nodered-docker@.service /etc/systemd/system/nodered-docker@.service
#systemctl enable nodered-docker@"${SERVICE_USER}"
#systemctl start nodered-docker@"${SERVICE_USER}"

#ln /home/"${SERVICE_USER}"/openhab/systemd/openhab-docker@.service /etc/systemd/system/openhab-docker@.service
#systemctl enable openhab-docker@"${SERVICE_USER}"
#systemctl start openhab-docker@"${SERVICE_USER}"
#
